Demo Task for Sliding Heap Library
==================================

This application demonstrates how a program can load data into sliding blocks within its Wimpslot, resizing both blocks and Wimpslot as necessary as the size of the data varies.

If you run !Demo, a window will open showing two sets of icons.   These represent two sliding blocks set up at the start of the program.   For each sliding block, there is one icon showing its current size (initially zero), one showing the memory address of the start of the block in hexadecimal, and one large icon showing the contents of the block.

Drag any file onto the leftmost of the two large icons.   You will see its contents reflected in the icon - if it is a text file, you may even be able to read it!   The filesize will also be shown.

You will notice that although the address of this block has not changed,the address of the other block (on the right hand side) has gone up, although this block is still empty.   This is because the second block 'slid' upwards in memory as the block below it expanded - that's why they are called 'sliding' blocks....

If you check the Wimpslot of the program (the green bar labelled Demo in the task display) you may see that it has also increased from its original size of 64K.   Load a second, larger, file into the right-hand block and the Wimpslot will definitely increase!   The program is automatically claiming more memory so that the sliding blocks can expand as far as necessary - it is possible to load files of many megabytes into this one small program, if you have enough memory to spare.  Load smaller files, and you will see the Wimpslot shrink back to the minimum necessary.   Close the window, and the application will quit automatically.

--------------------

If you load the BASIC file !Demo.!RunImage, you can see how it works.   I've used just five of the procedures from the SHeap library file:   PROCinitheaps, FNcreate_anchor, PROCcreate_named_sliding_block, PROCextend_named_sliding_block and PROCverify_heap (as a precaution).   The relevant sections of the file are highlighted by lines of five stars: *****.

The sliding block handling itself isn't particularly complex; I initialise the sliding heap at the start of the program, create 'anchors' and attach blocks to them.   Then, when a file is dragged onto one of the program's icons, I get the file's size, resize the relevant block to fit, and use OS_File 16 to load the file into that block.

The rest of the program is purely cosmetic and concerned with updating the icons.

----------------------

Harriet Bazley <harriet.bazley@blueyonder.co.uk>

43 Wilton Grove
Wimbledon
London SW19 3QU
4th November 2002