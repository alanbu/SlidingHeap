SLIDING HEAP MODULE
===================

The Sliding Heap module creates and manages a sliding heap of blocks of memory claimed from a program's Wimpslot as necessary, thus avoiding the fragmentation caused by repeatedly claiming and releasing memory from the RMA.   Each block is assigned to an 'anchor', a single word of memory which is guaranteed always to hold the address of the start of that block.   The order of blocks in the heap may change and their location will vary as other blocks grow and shrink;  thus sliding blocks should always be referenced via their anchors.

The SHeap BASIC library can also manage a fixed heap at the base of the sliding heap via the OS_Heap SWIs.   This can be used to store data where the size of the block will not change and where it is important for the base address of the block to remain constant;  however this heap is liable to fragmentation, and no code is provided to scrap or resize fixed heap blocks.   For normal usage it is expected that sliding blocks will be employed.

--------------------------------------------------------------------------------
    
BASIC INTERFACE
===============

A library of BASIC functions and procedures has been provided to make the Sliding Heap module simple to access from BASIC programs.   This SHeap library will manage the Wimpslot as required and carry out all the necessary SWI calls.   All global variables used within the library are prefixed by 'sh_', e.g. 'sh_fixedheapsize%', and programs should ensure that none of their internal variables share this prefix.

Usage
----

  PROCinitheaps(fixedheapsize%,slidingblocks%)

This procedure should be called during the initialisation of any program wishing to link with the SHeap library, before any sliding blocks can be claimed.   fixedheapsize% defines the initial size of the fixed heap, in bytes.   slidingblocks% defines the maximum number of 'slots' reserved in the sliding heap and thus the maximum number of sliding blocks which may be usedat once.   This limit may be increased subsequently by calling FNincreaseslots.

The recommended default is to set both parameters to 128 unless there is a particular reason to do otherwise.

Note that calling PROCinitheaps will automatically increase your program's Wimpslot by one 'page' of memory, although this space will initially be largely empty.   The Wimpslot will not visibly change thereafter until you have stored more than one 'page' worth of data in the heap.

(Page sizes vary between different machines, but for most modern RISC OS computers the Wimpslot will increase and decrease by 4 kilobytes at a time.   On machines running RISC OS 3.1 or earlier the initial increase may be as much as 32 kilobytes.)


  FNcreate_anchor(name$)

This function returns the address of a single word of memory, which is known as the 'anchor' location for a sliding block.   It serves the double purpose of identifying a given block when supplied as a parameter to other heap management functions, and of storing a pointer to the start of that block;  if the contents of this word are zero, then no block is currently attached to this anchor.   name$ should be supplied as a short string, which will be used to identify this block in error messages and in the output from PROCheapsinfo.   Once created, anchors cannot be destroyed, although the blocks to which they refer may be scrapped and recreated.

Note that calling FNcreate_anchor does not in itself create a *block*.   Before the anchor can be used, PROCcreate_named_sliding_block must be called.


  PROCcreate_named_sliding_block(anchor%,size%)

This procedure reserves a new block of size% bytes within the sliding heap, increasing the Wimpslot if required.   anchor% should be a value previously returned by FNcreate_anchor.   Sliding heap blocks are always word-aligned;  size% will be rounded up to a multiple of 4 bytes if necessary.

    EXAMPLE:
    test%=FNcreate_anchor("test")
    PROCcreate_named_sliding_block(test%,232)
    ptr%=!test%:REM get start of block
    SYS"OS_File",16,"$.data",ptr% :REM load data into block

Do not use PROCcreate_named_sliding_block to change the size of an existing block - use PROCextend_named_sliding_block instead.


  PROCextend_named_sliding_block(anchor%,newsize%)

This procedure increases (or decreases - the name is misleading) the size of a heap block.  If the block does not yet exist, it will be created instead.

Other blocks may slide around as the block size changes.   Note that newsize% gives the *total* size of the resulting block, not the amount by which you wish to increment or decrement it!   The current size of the block may first be obtained, if desired, via FNsliding_block_size.


  FNsliding_block_size(anchor%)

This function returns the current size, in bytes, of the sliding block referenced by anchor%.


  PROCscrap_sliding_block(anchor%)

This procedure will discard a sliding block, returning its memory to the heap.  The Wimpslot will shrink if appropriate.

Note that the anchor is NOT deleted and can be reused later.   In fact anchors cannot be deleted.


  PROCverify_heap

This procedure will force a check that none of the blocks have become corrupted, and that the heap's internal data structures are still valid.  The heap is automatically verified after sliding block operations, but corruption (for example, writing to an old pointer after the blocks have moved) will not otherwise show up until next time a heap operation is carried out.   Inserting PROCverify_heap earlier in the program allows you to test at what stage corruption occurred.

Note that a corrupted heap cannot be restored - PROCverifyheap does not return an error code, but will return silently if the heap verifies correctly and otherwise abort with an error.


  PROCdestroyheaps

This procedure will destroy both fixed and sliding heaps, and reset the Wimpslot.   It does *not* destroy any anchors, although it does reset any anchors in use to zero to indicate that those blocks have been scrapped.

The heap may be reinitialised by calling PROCinitheaps again, and the same anchors reused.


  PROCheapsinfo(block%)

This procedure will print a breakdown of the current fixed and sliding heap contents to screen for debugging purposes.   The parameter block% should point to a block of length at least 256 bytes which can be used as workspace.

    EXAMPLE:
    
    Fixed heap
    ----- ----
    Heap base    : &00088000
    Heap size    : 128 bytes
    Largest free : 108 bytes
    Total free   : 112 bytes
    
    Sliding heap
    ------- ----
    
    Heap information requested
    
    Generated by SlidingHeap 2.01, © Steven Haslam 1992 (29 Oct 2002)
    
    Heap base : &00088100
    Slots available in heap : 128
    Slots used : 1
    Top of heap : &00088934
    
    Blocks: (not necessarily in the order as in the heap)
    
    | Address   | Length      | Name
    | &00088914 |   32  bytes | test


  FNcreate_fixed_block(size%)

This function will create a block of size% bytes at the end of the fixed heap, shifting the sliding blocks upwards in memory and increasing the Wimpslot if necessary.   It returns the address of the new block.


   FNincreaseslots(new_maximum%)

This procedure will increase the total number of slots available in the heap, thus allowing up to new_maximum% blocks to be handled simultaneously.   To find the number of slots currently allowed, use FNincreaseslots(0).

--------------------------------------------------------------------------------

SWI INTERFACE
============

The various software interrupts provided by the module can also be called directly, although a program that does this will have to provide its own Wimpslot (or other memory) management - the SlidingHeap SWIs themselves simply handle a heap at a given location without claiming or releasing memory.   On entry, all SWIs require the location of the base of the heap to be passed in R0;  this makes it easy for several applications to use the module at once, but also implies that a single program could theoretically manage two independent heaps.


SWI calls provided
------------------

&000C0280	SlidingHeap_Create          
&000C0281	SlidingHeap_NewBlock        
&000C0282	SlidingHeap_ScrapBlock
&000C0283	SlidingHeap_ExtendBlock
&000C0284	SlidingHeap_HeapInfo
&000C0285	SlidingHeap_VerifyHeap
&000C0286	SlidingHeap_NextFree
&000C0287	SlidingHeap_IncreaseSlots
&000C0288	SlidingHeap_DescribeBlock
&000C0289	SlidingHeap_ShiftHeap

Errors generated
----------------

&000001E6 "Unknown SlidingHeap operation"		 [UNKNOWN SWI]       
&00C02800 "No more free slots in heap"			 [NewBlock]          
&00C02801 " Block overflow in Sliding Heap (%*0)"	 [VerifyHeap]        
&00C02802 "You must have at least one block in the heap!" [Create]            
&00C02803 "Heap ID corrupted (Bad signature)"		 [VerifyHeap]        
&00C02804 "Start of heap corrupted (Bad signature)"	 [VerifyHeap]
&00C02805 "Top of heap corrupted (Bad signature)"	 [Unused!]
&00C02806 "Anchor does not point to block (%*0)		 [VerifyHeap]
&00C02807 "Couldn't find anchor in heap (ScrapBlock)"	 [ScrapBlock]
&00C02808 "Couldn't find anchor in heap (ExtendBlock)"	 [ExtendBlock]
&00C02809 "Unable to decrease number of slots in heap"   [IncreaseSlots]
&00C0280A "Heap is not in valid memory"			 [VerifyHeap]        
&00C0280B "Couldn't find anchor in heap (DescribeBlock)" [DescribeBlock]

Heap format
-----------

 base+0        = heap signature word "«Hz»"
 base+4        = slot block count <n>
 base+8        = address of start of blocks
 base+12       = address of end of last block (and hence of the heap)

   <n>  slots of 4 words each
   slot+0      = pointer to start of block
   slot+4      = pointer to anchor word
   slot+8      = block size
   slot+12     = pointer to block name string

   after last slot
 base+ <n+1>*16      = block signature word "Blck"
   start of blocks
   each block is terminated by an extra word of data "Blck"
 <heap block data, block sig word>
 <heap block data, block sig word>
  etc.
   end of last block


Software Interrupts in detail
----------------------------

  SlidingHeap_Create	(&000C0280)

This SWI is called to initialise an empty sliding heap;  sufficient memory must have been allocated for the heap before calling SlidingHeap_Create.   The parameters define the location of the start of the heap, which grows upwards, and the maximum number of 'slots' available in the heap.   Each slot controls a single sliding block.

=>	R0 = base of new heap
	R1 = 2 (optional)
		if R1 = 2: R2 = maximum number of sliding blocks
		if R1 and R2 are set to 0: assign 15 slots in heap

<=	R0,R1,R2 corrupted


  SlidingHeap_NewBlock	(&000C0281)

This SWI is called to initialise an empty sliding block;  sufficient memory must have been allocated to the heap to accommodate the desired block size (which will be rounded up to a multiple of 4 bytes) before calling SlidingHeap_NewBlock.   If all the slots in the heap have already been initialised it will return an error.

=>	R0 = base of heap
	R1 = address of anchor word to use
	R2 = size of block to reserve
	R3 = address of string to be used as name of block

<=	all registers preserved


  SlidingHeap_ScrapBlock	(&000C0282)

This SWI is called to delete a sliding block, free up the slot it occupied, and return the spare memory to the heap.   This may enable the application to shrink its heap, but will not in itself do so.   The memory allocated for the anchor will not be freed - instead, the anchor word will contain zero.

=>	R0 = base of heap
	R1 address of anchor word

<=	all registers preserved


  SlidingHeap_ExtendBlock	(&000C0283)

This SWI is called to change the size of a sliding block, either increasing or decreasing it (the name is deceptive).   Note that the total new size is specified, not the change in size.   If the block is to grow, sufficient additional memory must already have been allocated to the heap;  if it is to shrink, then the memory must be freed manually afterwards.

=>	R0 = base of heap
	R1 = address of anchor word
	R2 = new block size

<=	all registers preserved


  SlidingHeap_HeapInfo	(&000C0284)

This SWI prints out details of heap usage - address of base of heap, number of slots used out of the total, address of top of heap, and address, length and name of every current block, in slot order.   It prints the information directly to the current output stream and is used for debugging only.

=>	R0 = base of heap

<=	all registers preserved


  SlidingHeap_VerifyHeap	(&000C0285)

This SWI checks the data held in the heap base and slots.   It checks that the start and end of heap addresses correspond to valid memory locations and that the heap signature word is still present (and thus that the start of the heap has not been overwritten).   It then checks each block for the block signature word at the end of the data, ensuring that the block start and length data are correct and that the end of the block has not been overwritten by attempting to write to another block using a bad pointer (the most common cause of heap corruption).   It exits silently if no problem is found, and otherwise returns the relevant error.

It is a good idea to call this SWI after every call to SlidingHeap_NewBlock,SlidingHeap_ScrapBlock, SlidingHeap_ExtendBlock or SlidingHeap_ShiftHeap.   It can also be inserted after other operations during debugging to determine where heap corruption is occurring.

=>	R0 = base of heap

<=	all registers preserved


  SlidingHeap_NextFree	(&000C0286)

This SWI returns the address of the next free word after the end of the last sliding block.   This address can be used to test how much free space remains before enlarging or shrinking the heap.

=>	R0 = base of heap

<=	R0 = address of first word after final heap block


  SlidingHeap_DescribeBlock	(&000C0288)

This SWI returns the four slot data items for a given block.

=>	R0 = base of heap
	R1 = address of anchor word

<=	R0 = start of block
	R1 = address of anchor word
	R2 = size of block
	R3 = address of name string

  SlidingHeap_IncreaseSlots	(000C0287)

This SWI increases the maximum number of slots in the heap, or returns the current number of slots allocated.

=>	R0 = current address of base of heap
	R1 = new maximum number of slots, or 0 to read current value

<=	R1 updated if 0 on entry
	all other registers preserved


  SlidingHeap_ShiftHeap	(&000C0289)

This SWI moves the entire sliding heap in memory, updating the internal references and the external anchor pointers.

=>	R0 = current address of base of heap
	R1 = new address for base of heap

<=	all registers preserved